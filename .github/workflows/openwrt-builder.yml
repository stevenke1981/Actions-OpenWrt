#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: 使用 GitHub Actions 构建 OpenWrt
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: OpenWrt Builder for Redmi AX6  # 工作流程的名称

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/openwrt/openwrt  # OpenWrt 仓库的 URL
  REPO_BRANCH: master  # OpenWrt 仓库的分支
  FEEDS_CONF: feeds.conf.default  # 自定义 feeds 配置文件
  CONFIG_FILE: .config  # OpenWrt 的配置文件
  DIY_P1_SH: diy-part1.sh  # 自定义部分一的脚本
  DIY_P2_SH: diy-part2.sh  # 自定义部分二的脚本
  UPLOAD_BIN_DIR: false  # 是否上传 bin 目录
  UPLOAD_FIRMWARE: true  # 是否上传固件
  UPLOAD_RELEASE: true  # 是否上传 release
  TZ: Asia/Taipei  # 时区

jobs:
  build:
    runs-on: ubuntu-22.04  # 运行环境为 Ubuntu 22.04

    steps:
    - name: Checkout  # 步骤：检出代码
      uses: actions/checkout@main

    - name: Initialization environment  # 步骤：初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code  # 步骤：克隆源代码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds  # 步骤：加载自定义 feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds  # 步骤：更新 feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds  # 步骤：安装 feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration  # 步骤：加载自定义配置
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Set up Wfifi on default config
      run: |
                mkdir -p files/etc/uci-defaults
                cat > files/etc/uci-defaults/99-setupwifi << EOF
                uci set wireless.radio0.country='AU'
                uci set wireless.radio1.country='AU'
                uci set wireless.radio0.disabled=0
                uci set wireless.radio1.disabled=0
		uci set wireless.radio0.channel=auto
        	uci set wireless.radio0.disabled=0
		uci set wireless.radio0.country=AU
		uci set wireless.default_radio0.ssid=redmiax6
		uci set wireless.default_radio0.encryption=sae-mixed
		uci set wireless.default_radio0.key=012345678
		uci set wireless.default_radio0.ieee80211k=1
		uci set wireless.default_radio0.wnm_sleep_mode=1
		uci set wireless.default_radio0.bss_transition=1
		uci set wireless.default_radio0.ieee80211r=1
		uci set wireless.default_radio0.mobility_domain=6688
		uci set wireless.default_radio0.ft_over_ds=0
		uci set wireless.default_radio0.ft_psk_generate_local=0
		uci set wireless.radio1.channel=auto
		uci set wireless.radio1.disabled=0
		uci set wireless.radio1.country=AU
		uci set wireless.default_radio1.ssid=redmiax6
		uci set wireless.default_radio1.encryption=sae-mixed
		uci set wireless.default_radio1.key=012345678
		uci set wireless.default_radio1.ieee80211k=1
		uci set wireless.default_radio1.wnm_sleep_mode=1
		uci set wireless.default_radio1.bss_transition=1
		uci set wireless.default_radio1.ieee80211r=1
		uci set wireless.default_radio1.mobility_domain=6688
		uci set wireless.default_radio1.ft_over_ds=0
		uci set wireless.default_radio1.ft_psk_generate_local=0
		uci set system.@system[0].hostname=Redmi_AX6
		uci set system.@system[0].zonename=Asia/Taipei
		uci set system.@system[0].timezone=CST-8				
                uci set pbuf.opt.memory_profile=auto
                uci set network.globals.packet_steering=0
                uci set firewall.@defaults[0].flow_offloading=0
                uci set ecm.@general[0].enable_bridge_filtering=0
                uci commit
                /etc/init.d/firewall restart
                /etc/init.d/qca-nss-ecm restart
                EOF

    - name: Download package  # 步骤：下载软件包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware  # 步骤：编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage  # 步骤：检查空间使用
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory  # 步骤：上传 bin 目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files  # 步骤：整理文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory  # 步骤：上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag  # 步骤：生成发布标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "🔗 [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release  # 步骤：上传固件到发布
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs  # 步骤：删除工作流程运行
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases  # 步骤：删除旧版本
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
